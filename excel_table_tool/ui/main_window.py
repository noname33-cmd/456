# ui/main_window.py
import threading
import time
import os
import json
import pandas as pd
import ttkbootstrap as tb
from ttkbootstrap.constants import *
from tkinter import filedialog, messagebox
from tkinter import Menu
from core.analytics import plot_histogram, plot_pie, plot_line
from core import template_manager, ai_assistant
from core import file_loader, exporter, analytics, session
from ui.table_preview import show_table_preview
from ui import dialogs
from core import intelligent_processor
from core.user_interaction import merge_suggestion
from ui import error_table
import core.data_processor as data_processor
from core import validator


HISTORY_FILE = "history.json"
df_global = pd.DataFrame()
df_undo_stack = []
df_redo_stack = []
watching = False
watch_thread = None
WATCH_FOLDER = "watch"
TEMPLATE_TO_APPLY = "default_template"
os.makedirs(WATCH_FOLDER, exist_ok=True)

def df_to_json(df): return df.to_json(orient="split")
def df_from_json(js): return pd.read_json(js, orient="split")

def save_history():
    data = {
        "undo": [df_to_json(df) for df in df_undo_stack],
        "redo": [df_to_json(df) for df in df_redo_stack]
    }
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f)

def load_history():
    global df_undo_stack, df_redo_stack
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
                df_undo_stack = [df_from_json(d) for d in data.get("undo", [])]
                df_redo_stack = [df_from_json(d) for d in data.get("redo", [])]
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:", e)


def launch_gui():
    global df_global, df_undo_stack, df_redo_stack, watching, watch_thread

    current_theme = ["darkly"]
    app = tb.Window(title="Excel Super Tool", themename=current_theme[0])
    app.geometry("1200x800")

    def update_status(text): status_label.config(text=text)
    def log(msg): log_box.insert(tb.END, f"{msg}\n"); log_box.yview_moveto(1)
    def save_state(): df_undo_stack.append(df_global.copy()); df_redo_stack.clear(); save_history()

    def undo():
        global df_global
        if df_undo_stack:
            df_redo_stack.append(df_global.copy())
            df_global = df_undo_stack.pop()
            show_table_preview(df_global, table_frame)
            update_status("–û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
            log("‚Ü©Ô∏è Undo")
            save_history()
        else: update_status("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

    def redo():
        global df_global
        if df_redo_stack:
            df_undo_stack.append(df_global.copy())
            df_global = df_redo_stack.pop()
            show_table_preview(df_global, table_frame)
            update_status("–ü–æ–≤—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω")
            log("‚Ü™Ô∏è Redo")
            save_history()
        else: update_status("–ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞")

    def open_template_manager():
        dialogs.template_manager_dialog(
            template_manager.list_templates(),
            actions={
                "list": template_manager.list_templates,
                "rename": template_manager.rename_template,
                "delete": template_manager.delete_template,
                "duplicate": template_manager.duplicate_template,
            })

    def merge_by_key():
        global df_global
        if df_global.empty:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª.")
            return

        path = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º", filetypes=[("Excel", "*.xlsx *.xls"), ("CSV", "*.csv"), ("JSON", "*.json")])
        if not path:
            return

        ref_df = file_loader.load_files([path])
        if ref_df.empty:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫.")
            return

        # –°–ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª—é—á–∏ –∏ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        key = dialogs.ask_column_dialog(df_global.columns.tolist(), "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—â–∏–π –∫–ª—é—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–ò–ù)")
        ref_key = dialogs.ask_column_dialog(ref_df.columns.tolist(), "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–ò–ù)")
        columns_to_merge = dialogs.ask_columns_multi_dialog(ref_df.columns.tolist(), "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏")

        if key and ref_key and columns_to_merge:
            save_state()
            merged = pd.merge(df_global, ref_df[[ref_key] + columns_to_merge], left_on=key, right_on=ref_key, how="left")
            df_global = merged
            show_table_preview(df_global, table_frame)
            update_status(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –ø–æ –∫–ª—é—á—É: {key}")
            log(f"üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ '{key}' ‚Üê '{ref_key}'")
            save_history()

    def watch_folder_loop():
        global df_global
        seen_files = set()
        while watching:
            try:
                files = [f for f in os.listdir(WATCH_FOLDER) if f.endswith((".xlsx", ".xls", ".csv", ".json", ".txt"))]
                new_files = [f for f in files if f not in seen_files]
                for f in new_files:
                    full_path = os.path.join(WATCH_FOLDER, f)
                    df = file_loader.load_files([full_path])
                    if not df.empty:
                        save_state()
                        df_global = data_processor.apply_template(df, TEMPLATE_TO_APPLY)
                        show_table_preview(df_global, table_frame)
                        update_status(f"üì• –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {f}")
                        log(f"‚öôÔ∏è –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ {f} —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω {TEMPLATE_TO_APPLY}")
                        save_history()
                    seen_files.add(f)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–µ:", e)
            time.sleep(5)

    def toggle_autowatch():
        global watching, watch_thread
        watching = not watching
        if watching:
            watch_thread = threading.Thread(target=watch_folder_loop, daemon=True)
            watch_thread.start()
            log("üü¢ –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞")
            update_status("–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
        else:
            log("üî¥ –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            update_status("–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def load_files():
        global df_global
        paths = filedialog.askopenfilenames(filetypes=[("–§–∞–π–ª—ã", "*.xlsx *.xls *.csv *.json *.txt")])
        if not paths: return

        df_list = file_loader.load_multiple_files(paths)
        if not df_list:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return

        if len(df_list) >= 2:
            df = merge_suggestion(df_list)
        else:
            df = df_list[0]

        df_global = df
        df_undo_stack.clear()
        df_redo_stack.clear()
        save_state()
        show_table_preview(df_global, table_frame)
        session.save_session_info(paths)
        update_status(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(df_global)} —Å—Ç—Ä–æ–∫")
        log("üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–∞–π–ª—ã")

    def load_and_merge_smart():
        global df_global
        paths = filedialog.askopenfilenames(filetypes=[("–§–∞–π–ª—ã", "*.xlsx *.xls *.csv *.json *.txt")])
        if not paths: return

        dfs = {}
        for p in paths:
            df = file_loader.load_files([p])
            if not df.empty:
                dfs[os.path.basename(p)] = df

        from core import multi_file_analyzer
        main_name, ref_files, key_candidates, err = multi_file_analyzer.analyze_files(dfs)

        if err:
            messagebox.showwarning("–û—à–∏–±–∫–∞", err)
            return

        if not key_candidates:
            messagebox.showinfo("–ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—â–∏–π –∫–ª—é—á –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏.")
            return

    # –ó–∞–ø—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª—é—á–∞
        from ui.dialogs import ask_column_dialog
        key = ask_column_dialog(key_candidates, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")

        if not key:
            messagebox.showinfo("–û—Ç–º–µ–Ω–∞", "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return

        ref_pairs = [(name, dfs[name]) for name, _ in ref_files]
        result_df = multi_file_analyzer.join_with_references(dfs[main_name], ref_pairs, key)

        if not result_df.empty:
            save_state()
            df_global = result_df
            show_table_preview(df_global, table_frame)
            update_status("üìé –§–∞–π–ª—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã")
            log(f"üîó –£–º–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ '{key}'")
            save_history()

    def export_to_pdf():
        if df_global.empty: return
        path = filedialog.asksaveasfilename(defaultextension=".pdf")
        if path:
            exporter.export_to_pdf(df_global, path)
            update_status("–≠–∫—Å–ø–æ—Ä—Ç PDF –≤—ã–ø–æ–ª–Ω–µ–Ω"); log("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF")

    def export_to_excel():
        if df_global.empty: return
        path = filedialog.asksaveasfilename(defaultextension=".xlsx")
        if path:
            exporter.export_to_excel(df_global, path)
            update_status("–≠–∫—Å–ø–æ—Ä—Ç Excel –≤—ã–ø–æ–ª–Ω–µ–Ω"); log("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")

    def show_summary():
        if df_global.empty: return
        summary = analytics.get_summary(df_global)
        messagebox.showinfo("–°–≤–æ–¥–∫–∞", summary)

    def filter_data():
        global df_global
        keyword = dialogs.ask_string("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:")
        if keyword:
            save_state()
            df_global = data_processor.filter_by_keyword(df_global, keyword)
            show_table_preview(df_global, table_frame)
            update_status(f"–§–∏–ª—å—Ç—Ä: {keyword}"); log(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {keyword}"); save_history()

    def apply_advanced_filter():
        global df_global
        if df_global.empty: return
        res = dialogs.advanced_filter_dialog(df_global.columns.tolist())
        if res:
            save_state()
            df_global = data_processor.advanced_filter(df_global, res["column"], res["operator"], res["value"])
            show_table_preview(df_global, table_frame)
            update_status(f"–§–∏–ª—å—Ç—Ä: {res}"); log(f"üß™ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä: {res}"); save_history()

    def clean_data():
        global df_global
        if df_global.empty: return
        save_state()
        df_global = data_processor.clean_dataframe(df_global)
        show_table_preview(df_global, table_frame)
        update_status("–¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞"); log("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã"); save_history()

    def save_current_as_template():
        if df_global.empty: return
        name = dialogs.ask_string("–®–∞–±–ª–æ–Ω", "–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:")
        if not name: return
        config = {
            "drop_columns": [col for col in df_global.columns if col.lower().startswith("unnamed")],
            "filters": [], "add_columns": [], "clean": True
        }
        template_manager.save_template(name, config)
        update_status(f"–®–∞–±–ª–æ–Ω '{name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω"); log(f"üíæ –®–∞–±–ª–æ–Ω '{name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

    def apply_template_action():
        global df_global
        templates = template_manager.list_templates()
        if not templates:
            messagebox.showwarning("–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤", "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —à–∞–±–ª–æ–Ω."); return
        selected = dialogs.select_template_dialog(templates)
        if selected:
            save_state()
            df_global = data_processor.apply_template(df_global, selected)
            show_table_preview(df_global, table_frame)
            update_status(f"–ü—Ä–∏–º–µ–Ω—ë–Ω —à–∞–±–ª–æ–Ω: {selected}"); log(f"üì• –ü—Ä–∏–º–µ–Ω—ë–Ω —à–∞–±–ª–æ–Ω: {selected}"); save_history()

    def add_column():
        global df_global
        name = dialogs.ask_string("–°—Ç–æ–ª–±–µ—Ü", "–ù–∞–∑–≤–∞–Ω–∏–µ:")
        val = dialogs.ask_string("–°—Ç–æ–ª–±–µ—Ü", "–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
        if name:
            save_state()
            df_global = data_processor.add_column(df_global, name, val)
            show_table_preview(df_global, table_frame)
            update_status(f"–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü: {name}"); log(f"‚ûï –°—Ç–æ–ª–±–µ—Ü '{name}'"); save_history()

    def switch_theme():
        themes = ["darkly", "flatly"]
        idx = themes.index(current_theme[0])
        new_theme = themes[(idx + 1) % len(themes)]
        current_theme[0] = new_theme
        app.style.theme_use(new_theme)
        update_status(f"–¢–µ–º–∞: {new_theme}")

    def show_histogram():
        if df_global.empty: return
        col = dialogs.ask_column_dialog(df_global.columns.tolist(), "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞")
        if col:
            plot_histogram(df_global, col); log(f"üìä –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ '{col}'")

    def show_pie_chart():
        if df_global.empty: return
        col = dialogs.ask_column_dialog(df_global.columns.tolist(), "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞")
        if col:
            plot_pie(df_global, col); log(f"ü•ß –ö—Ä—É–≥–æ–≤–∞—è –ø–æ '{col}'")

    #def show_line_chart():
    #    if df_global.empty: return
    #    x_col, y_col = dialogs.ask_two_columns_dialog(df_global.columns.tolist(), "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫")
    #    if x_col and y_col:
    #        plot_line(df_global, x_col, y_col); log(f"üìà –õ–∏–Ω–µ–π–Ω—ã–π: {x_col} ‚Üí {y_col}")

    def smart_merge_gui():
        global df_global
        if df_global.empty:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª.")
            return
        path = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
        if not path: return
        save_state()
        df_global, msg = intelligent_processor.smart_load_and_merge(df_global, path)
        show_table_preview(df_global, table_frame)
        update_status(msg); log(f"ü§ñ {msg}"); save_history()

    def show_line_chart():
        if df_global.empty: return
        x_col, y_col = dialogs.ask_two_columns_dialog(df_global.columns.tolist(), "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫")
        if x_col and y_col:
            plot_line(df_global, x_col, y_col)
            log(f"üìà –õ–∏–Ω–µ–π–Ω—ã–π: {x_col} ‚Üí {y_col}")

    def ai_assistant_callback():
        global df_global
        new_df = ai_assistant.run_ai_assistant(df_global)
        if new_df is not None and not new_df.equals(df_global):
            save_state()
            df_global = new_df
            show_table_preview(df_global, table_frame)
            update_status("AI –ø—Ä–∏–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ")
            log("ü§ñ AI –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            save_history()

    def validate_data():
        global df_global
        if df_global.empty:
            messagebox.showwarning("–ü—Ä–æ–≤–µ—Ä–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É.")
            return
        errors = validator.validate_dataframe(df_global)
        if errors:
            error_table.show_error_table(errors, df_global, on_corrected_callback=lambda: show_table_preview(df_global, table_frame))
        else:
            messagebox.showinfo("–ü—Ä–æ–≤–µ—Ä–∫–∞", "–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    def check_errors_and_edit():
        global df_global

        errors, highlight_cells = validator.validate_dataframe(df_global)
        if not errors:
            messagebox.showinfo("–ü—Ä–æ–≤–µ—Ä–∫–∞", "–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        def after_correct():
            show_table_preview(df_global, table_frame, highlight_cells=None)
            update_status("–û—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            log("‚úÖ –û—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")

        error_table.show_error_table(errors, df_global, after_correct)

    def calculate_duration():
        global df_global
        if df_global.empty:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É.")
            return

        start_col = dialogs.ask_column_dialog(df_global.columns.tolist(), "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –Ω–∞—á–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏")
        end_col = dialogs.ask_column_dialog(df_global.columns.tolist(), "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")
        if not start_col or not end_col:
            return

        output_col = dialogs.ask_string("–ò–º—è –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)'):")
        if not output_col:
            output_col = "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)"

        try:
            save_state()
            df_global = data_processor.calculate_duration_column(df_global, start_col, end_col, output_col)
            show_table_preview(df_global, table_frame)
            update_status(f"–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {output_col}")
            log(f"‚è± –†–∞—Å—á—ë—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {start_col} ‚Üí {end_col} ‚Üí {output_col}")
            save_history()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {e}")

    # === Menu ===
    menubar = Menu(app)

    tools_menu = Menu(menubar, tearoff=0)
    tools_menu.add_command(label="ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫", command=ai_assistant_callback)
    menubar.add_cascade(label="–ü–æ–º–æ—â–Ω–∏–∫", menu=tools_menu)

    file_menu = Menu(menubar, tearoff=0)
    file_menu.add_command(label="–ó–∞–≥—Ä—É–∑–∏—Ç—å", command=load_files)
    file_menu.add_command(label="–£–º–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ", command=load_and_merge_smart)
    file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel", command=export_to_excel)
    file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PDF", command=export_to_pdf)
    file_menu.add_command(label="–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ –∫–ª—é—á—É", command=merge_by_key)
    file_menu.add_command(label="–£–º–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ", command=smart_merge_gui)
    file_menu.add_separator()
    file_menu.add_command(label="–í—ã—Ö–æ–¥", command=app.destroy)
    menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)

    edit_menu = Menu(menubar, tearoff=0)
    edit_menu.add_command(label="–û—Ç–º–µ–Ω–∏—Ç—å", command=undo)
    edit_menu.add_command(label="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", command=redo)
    edit_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å", command=clean_data)
    edit_menu.add_command(label="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü", command=add_column)
    menubar.add_cascade(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", menu=edit_menu)

    filter_menu = Menu(menubar, tearoff=0)
    filter_menu.add_command(label="–ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä", command=filter_data)
    filter_menu.add_command(label="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä", command=apply_advanced_filter)
    menubar.add_cascade(label="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è", menu=filter_menu)

    analytics_menu = Menu(menubar, tearoff=0)
    analytics_menu.add_command(label="–°–≤–æ–¥–∫–∞", command=show_summary)
    analytics_menu.add_command(label="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", command=show_histogram)
    analytics_menu.add_command(label="–ö—Ä—É–≥–æ–≤–∞—è", command=show_pie_chart)
    analytics_menu.add_command(label="–õ–∏–Ω–∏—è", command=show_line_chart)
    analytics_menu.add_command(label="–†–∞—Å—á—ë—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", command=calculate_duration)
    analytics_menu.add_command(label="–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö", command=validate_data)
    menubar.add_cascade(label="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", menu=analytics_menu)


    templates_menu = Menu(menubar, tearoff=0)
    templates_menu.add_command(label="–ü—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", command=apply_template_action)
    templates_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω", command=save_current_as_template)
    templates_menu.add_command(label="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏", command=open_template_manager)
    menubar.add_cascade(label="–®–∞–±–ª–æ–Ω—ã", menu=templates_menu)

    settings_menu = Menu(menubar, tearoff=0)
    settings_menu.add_command(label="–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", command=switch_theme)
    settings_menu.add_command(label="–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞", command=toggle_autowatch)
    menubar.add_cascade(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", menu=settings_menu)


    validation_menu = Menu(menubar, tearoff=0)
    validation_menu.add_command(label="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", command=check_errors_and_edit)
    menubar.add_cascade(label="–í–∞–ª–∏–¥–∞—Ü–∏—è", menu=validation_menu)

    app.config(menu=menubar)

    global table_frame
    table_frame = tb.Frame(app)
    table_frame.pack(fill=tb.BOTH, expand=True, padx=10, pady=10)

    tb.Label(app, text="–ñ—É—Ä–Ω–∞–ª:").pack(anchor="w", padx=10)
    log_box = tb.Text(app, height=6, bg="#2c2c2c", fg="white", insertbackground="white")
    log_box.pack(fill=tb.X, padx=10, pady=(0, 5))

    status_label = tb.Label(app, text="–ì–æ—Ç–æ–≤–æ", anchor="w", bootstyle="inverse")
    status_label.pack(fill=tb.X, side=tb.BOTTOM, ipady=2)

    load_history()
    app.mainloop()